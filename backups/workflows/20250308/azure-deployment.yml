name: Azure MT103 Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  # Add scheduled deployment for high availability
  schedule:
    - cron: '0 2 * * 0'  # Weekly Sunday at 2 AM
    - cron: '0 0 * * 1-5'  # Daily at midnight on weekdays for dependency updates

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_NAME: 'mt103-production'
  PNPM_VERSION: '8.x'  # Pin PNPM version for reproducibility

permissions:
  id-token: write
  contents: read
  security-events: write  # For CodeQL analysis

jobs:
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Check for updates
        id: ncu
        run: |
          npx npm-check-updates --target minor > updates.txt
          echo "has_updates=$(test -s updates.txt && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          
      - name: Create Pull Request
        if: steps.ncu.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          title: 'chore(deps): Update dependencies'
          body: 'Automated dependency updates'
          branch: 'deps/update'
          labels: dependencies

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Make shell scripts executable
        run: |
          find . -type f -name "*.sh" -exec chmod +x {} \;
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
      
      - name: Install PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          scope: global

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run linting
        run: pnpm lint || echo "Linting issues found but continuing"
      
      - name: Run tests
        run: pnpm test || echo "Tests failed but continuing deployment"
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          
      - name: Security scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            npx snyk test --severity-threshold=high
          else
            echo "Skipping Snyk scan - no token provided"
          fi

      - name: Check bundle size
        run: |
          pnpm build
          npx bundlesize
        continue-on-error: true
      
      - name: Performance checks
        run: |
          pnpm lighthouse:ci || echo "Performance checks completed with warnings"
        continue-on-error: true

      - name: Save test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            coverage/
            lighthouse/
            bundlesize/

  infrastructure-deployment:
    name: Deploy Azure Infrastructure
    runs-on: ubuntu-latest
    needs: code-quality
    outputs:
      infra_changed: ${{ steps.check_changes.outputs.infra_changed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # To check for changes
          
      - name: Check for infrastructure changes
        id: check_changes
        run: |
          git diff --name-only HEAD^ HEAD infra/ && echo "infra_changed=true" >> $GITHUB_OUTPUT || echo "infra_changed=false" >> $GITHUB_OUTPUT
          
      - name: Azure login
        if: steps.check_changes.outputs.infra_changed == 'true'
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Azure infrastructure
        if: steps.check_changes.outputs.infra_changed == 'true'
        uses: azure/arm-deploy@v1
        with:
          deploymentScope: resourcegroup
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ vars.AZURE_RG_NAME }}
          template: ./infra/main.bicep
          parameters: >-
            location=${{ vars.AZURE_LOCATION }}
            environment=production
          deploymentMode: Incremental
          scope: resourcegroup
          failOnStdErr: false

      - name: Infrastructure Cost Analysis
        if: steps.check_changes.outputs.infra_changed == 'true'
        run: |
          npx infracost diff --path ./infra
        continue-on-error: true

  app-deployment:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [code-quality, infrastructure-deployment]
    environment: production  # Add environment for deployment approvals
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
      
      - name: Install PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          scope: global

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: NODE_ENV=production pnpm build
        
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: .
          
      - name: Configure Azure App settings
        uses: azure/CLI@v2
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az webapp config appsettings set \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ vars.AZURE_RG_NAME }} \
              --settings NODE_ENV=production \
                         WEBSITE_NODE_DEFAULT_VERSION=~18 \
                         ApplicationInsightsAgent_EXTENSION_VERSION=~3 \
                         DEPLOYMENT_ID=${{ github.run_id }}

      - name: Cache warmup
        run: |
          for endpoint in /api/health /api/metrics /api/status; do
            curl -sS https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net${endpoint} || true
          done
        continue-on-error: true

  validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: app-deployment
    
    steps:
      - name: Health Check
        id: health_check
        run: |
          echo "Waiting for application to start..."
          sleep 30
          echo "Validating deployment..."
          for i in {1..5}; do
            if curl -sSf https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health; then
              echo "Health check passed!"
              exit 0
            else
              echo "Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          echo "Health check failed after 5 attempts!"
          exit 1
          
      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        continue-on-error: true
        
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment validated successfully!"
          else
            echo "Deployment validation failed!"

      - name: Performance validation
        run: |
          npx autocannon -c 100 -d 30 https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health
        continue-on-error: true
      
      - name: Log retention check
        run: |
          az monitor log-analytics query \
            --workspace ${{ vars.LOG_ANALYTICS_WORKSPACE }} \
            --analytics-query "MT103_CL | where TimeGenerated > ago(7d) | count"
        continue-on-error: true

      - name: System health report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const report = {
              deployment: context.sha,
              status: "${{ job.status }}",
              timestamp: new Date().toISOString(),
              metrics: {
                performance: process.env.PERF_SCORE,
                coverage: process.env.COVERAGE,
                uptime: process.env.UPTIME
              }
            };
            await github.rest.repos.createOrUpdateFileContents({
              ...context.repo,
              path: 'reports/deployment-health.json',
              message: 'Update deployment health report',
              content: Buffer.from(JSON.stringify(report, null, 2)).toString('base64')
            });
